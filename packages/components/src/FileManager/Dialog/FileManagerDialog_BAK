import React from "react";
import Dialog from "@material-ui/core/Dialog";
import DialogActions from "@material-ui/core/DialogActions";
import DialogContent from "@material-ui/core/DialogContent";
import DialogContentText from "@material-ui/core/DialogContentText";
import DialogTitle from "@material-ui/core/DialogTitle";
import CircularProgress from "@material-ui/core/CircularProgress";
import Typography from "@material-ui/core/Typography";
import CloseIcon from "@material-ui/icons/Close";
import Button from "@material-ui/core/Button";
import IconButton from "@material-ui/core/IconButton";
import clsx from "clsx";

// Custom.
import { FileManagerDialogProps } from "../global";
import I18n from "Services/I18n";
import { useStyles } from "./styles";
import { useStylesActions } from "ui/styles/actions";

const FileManagerDialog: React.FC<FileManagerDialogProps> = (props) => {
  const {
    children,
    open,
    title,
    subtitle,
    contentText,
    loading,
    saveDisabled,
    onCancel,
    onConfirm,
  } = props;
  const classes = useStyles();
  useStylesActions();

  // Method.

  const handleConfirm = () => {
    if (loading) {
      return;
    }
    if (onConfirm) {
      onConfirm();
    }
  };

  const handleClose = () => {
    if (loading) {
      return;
    }
    if (onCancel) {
      onCancel();
    }
  };

  return (
    <Dialog
      open={open}
      onClose={handleClose}
      classes={{ paper: classes.paper }}
      disableBackdropClick={loading}
    >
      <DialogTitle disableTypography classes={{ root: classes.titleRoot }}>
        <div className={classes.titleWrapper}>
          {title && (
            <Typography variant="h6" className={classes.title}>
              {title}
            </Typography>
          )}
          {subtitle && subtitle !== "" && (
            <Typography variant="caption" className={classes.subtitle}>
              {subtitle}
            </Typography>
          )}
        </div>
        <IconButton aria-label="close" onClick={handleClose}>
          <CloseIcon />
        </IconButton>
      </DialogTitle>
      <DialogContent classes={{ root: classes.contentRoot }}>
        {contentText && <DialogContentText>{contentText}</DialogContentText>}
        {children}
      </DialogContent>
      <DialogActions classes={{ root: classes.actionsRoot }}>
        <Button onClick={handleClose} color="secondary" disabled={loading}>
          {I18n.get.actions.cancel}
        </Button>
        <Button
          onClick={handleConfirm}
          color="secondary"
          variant="contained"
          disabled={saveDisabled || loading}
          className={clsx("vo-global__actions-button-confirm", {
            "vo-global__actions-loading": loading,
          })}
          disableFocusRipple={loading}
        >
          <span className="vo-global__actions-button-confirm-label">
            {I18n.get.actions.save}
          </span>
          {loading && (
            <CircularProgress
              className="vo-global__actions-button-create-loading"
              color="inherit"
              size={25}
            />
          )}
        </Button>
      </DialogActions>
    </Dialog>
  );
};

export default FileManagerDialog;

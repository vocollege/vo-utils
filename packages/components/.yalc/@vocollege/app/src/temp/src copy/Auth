import axios from 'axios';
import crypto from 'crypto-js';
import * as Utils from './Utils';

import { AuthConfigType } from '../VoAppTypes';
import Api from './Api';


class Auth {

    config: AuthConfigType|undefined;
    state: string;
    verifier: string;
    challenge: string;


    constructor(config?: AuthConfigType) {
        this.config = config;
        this.state = '';
        this.verifier = '';
        this.challenge = '';

    }


    check() {

        this.checkConfig();




        // this.state = Utils.createRandomString(40);
        // this.verifier = Utils.createRandomString(128);
        // this.challenge = Utils.base64Url(crypto.SHA256(this.verifier));

        

        return new Promise(async (resolve, reject) => {
            setTimeout(() => {
              resolve({ name: "Dhavyd" });
            }, 5000);


            if (!this.getAccessToken()) {
                try {


                    const user = await Api.getUser();

                    console.log('user', user);
    
                } catch(error) {
                    console.error('Auth.check()', error);
                }
            }
            

        //     if (e.origin !== 'http://localhost:3000' || ! Object.keys(e.data).includes('access_token')) {
        //         return;
        //       }
        
        //       const {token_type, access_token} = e.data;
        //       // const {token_type, expires_in, access_token, refresh_token} = e.data;
        //       axios.defaults.headers.common['Authorization'] = token_type + ' ' + access_token;
        
        //       axios.get('http://localhost:8000/api/user')
        //         .then(resp => {
        //           console.log(resp);
        //         });
        

          });
    }

    checkConfig() {
        if (!this.config) {
            console.error('VoApp is not configured properly. You need to initiate it with VoApp.configure() method.');
        }
    }

    getAccessToken() {
        console.log('getAccessToken()', this.config);

        // return this.config.STORAGE.ACCESS_TOKEN ? Utils.localStorage.get(this.config.STORAGE.ACCESS_TOKEN) : false;
        return false;
    }

    getUrl() {
        if (!this.config) {
            return '';
        }
        return this.config.BASE_URL + '/' + this.config.ENDPOINT;
    }

    // const getLoginUrl = () => {
    //     return 'http://localhost:8000/oauth/authorize?client_id=91c51b49-e705-4993-a8c7-497ee47e869e&redirect_uri=http://localhost:3000/auth&response_type=code&scope=*&state=' + state + '&code_challenge=' + challenge + '&code_challenge_method=S256'
    //   }
    

}


export default Auth;